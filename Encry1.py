# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Encry1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, QThread
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QMainWindow
import des as d
import os
import base as b
import _thread
import sys

# 二重des两个加密密钥key1、key2
key1 = '01010010100110010101000100101001001101000101011001111000'
key2 = '00101011010101010101000111010010101001010110101010101010'
IV = '0101110001000010100101000101110110001000100110010001111000010000'

class Ui_Form(object):
    def __init__(self):
        self.centralwidget = None
        self.imgName = ''

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1077, 580)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(70, 370, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(510, 100, 111, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(30, 90, 241, 231))
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(660, 20, 261, 231))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(510, 380, 111, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(660, 290, 261, 231))
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(300, 30, 201, 181))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.radioButton_4 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_4.setGeometry(QtCore.QRect(10, 150, 101, 18))
        self.radioButton_4.setObjectName("radioButton_4")
        self.radioButton = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton.setGeometry(QtCore.QRect(10, 30, 101, 18))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.radioButton.setFont(font)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_2.setGeometry(QtCore.QRect(10, 70, 101, 18))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_3.setGeometry(QtCore.QRect(10, 110, 101, 18))
        self.radioButton_3.setObjectName("radioButton_3")
        self.groupBox_2 = QtWidgets.QGroupBox(Form)
        self.groupBox_2.setGeometry(QtCore.QRect(290, 290, 211, 191))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.radioButton_5 = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_5.setGeometry(QtCore.QRect(20, 30, 101, 18))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setObjectName("radioButton_5")
        self.radioButton_6 = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_6.setGeometry(QtCore.QRect(20, 70, 101, 18))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.radioButton_6.setFont(font)
        self.radioButton_6.setObjectName("radioButton_6")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.label.setScaledContents(True)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "选择图片"))
        self.pushButton_2.setText(_translate("Form", "加密"))
        self.pushButton_3.setText(_translate("Form", "解密"))
        self.groupBox.setTitle(_translate("Form", "加密模式"))
        self.radioButton_4.setText(_translate("Form", "CTR"))
        self.radioButton.setText(_translate("Form", "ECB"))
        self.radioButton_2.setText(_translate("Form", "CBC"))
        self.radioButton_3.setText(_translate("Form", "CFB"))
        self.groupBox_2.setTitle(_translate("Form", "加密次数"))
        self.radioButton_5.setText(_translate("Form", "双重"))
        self.radioButton_6.setText(_translate("Form", "三重"))
        self.label.setStyleSheet('border-width: 1px; border-style: solid; border-color: rgb(255,170,0);'
                                 'background-color: rgb(100,149.237);')
        self.label_3.setStyleSheet('border-width: 1px; border-style: solid; border-color: rgb(255,170,0);'
                                 'background-color: rgb(100,149.237);')
        self.label_2.setStyleSheet('border-width: 1px; border-style: solid; border-color: rgb(255,170,0);'
                                 'background-color: rgb(100,149.237);')


# 线程类
class Encry_Thread(QThread):
    finishSignal = pyqtSignal(str)

    def __init__(self, t, func, name, parent = None):
        super(Encry_Thread, self).__init__(parent)
        self.img = t
        self.Algo = func # 传入加密函数(参数)
        self.Name = name # 文件前缀

    # run函数是子线程中的操作，线程启动后开始执行
    def run(self):
        try:
            newfileName = self.Name + os.path.split(self.img)[-1]
            print("加密线程开启")
            self.Algo(self.img, newfileName)
            # 通过emit将加密图片的信息传递给主线程
            self.finishSignal.emit(newfileName)
        except:
            self.finishSignal.emit("failure")

# 解密线程
class Decry_Thread(QThread):
    finishSignal = pyqtSignal(str)
    def __init__(self, t, func, name, parent = None):
        super(Decry_Thread, self).__init__(parent)
        self.img = t
        self.Algo = func
        self.Name = name

    # run函数是子线程中的操作，线程启动后开始执行
    def run(self):
        try:
            newfileName = self.Name + os.path.split(self.img)[-1]
            print("解密线程开启")
            self.Algo(self.img, newfileName)
            # 通过emit将加密图片的信息传递给主线程
            self.finishSignal.emit(newfileName)
        except:
            self.finishSignal.emit("failure")

# 主线程窗口
class MainWindow(QMainWindow, Ui_Form):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setupUi(self)

        # 解密方法
        self.Defunc = encryption_ECB

        # 加密方法
        self.Enfunc = encryption_ECB
        self.EnName = "ECB"
        # 选择图片按钮
        self.pushButton.clicked.connect(self.openimage)
        # 加密按钮
        self.pushButton_2.clicked.connect(self.Start2)
        # 解密按钮
        self.pushButton_3.clicked.connect(self.Start3)
        self.radioButton.setChecked(True)

    def setButtonUnAble(self):
        self.pushButton.setEnabled(False)
        self.pushButton_2.setEnabled(False)
        self.pushButton_3.setEnabled(False)

    def setButtonAble(self):
        self.pushButton.setEnabled(True)
        self.pushButton_2.setEnabled(True)
        self.pushButton_3.setEnabled(True)

    # 加密线程
    def Start2(self):
        if self.imgName != '':
            if self.radioButton.isChecked() == True:
                self.Enfunc = encryption_ECB
                self.EnName = "ECB_"
            elif self.radioButton_2.isChecked() == True:
                self.Enfunc = encryption_CBC
                self.EnName = "CBC_"
            elif self.radioButton_3.isChecked() == True:
                self.Enfunc = encryption_CFB
                self.EnName = "CFB_"
            elif self.radioButton_4.isChecked() == True:
                self.Enfunc = encryption_CTR
                self.EnName = "CTR_"
            self.thread = Encry_Thread(self.imgName, self.Enfunc, self.EnName)
            self.label_3.setPixmap(QtGui.QPixmap(""))  # 清空图片
            messageDialog("正在对图片进行" + self.Enfunc.__name__ + "加密," + "请勿执行其他操作!!")
            self.setButtonUnAble()
            self.thread.finishSignal.connect(self.En_fins)
            self.thread.start()
        else:
            messageDialog("没有图片")

    # 解密线程
    def Start3(self):
        if self.imgName != '':
            front_name = os.path.split(self.imgName)[-1].split('_',1)[0]
            print(front_name)
            if front_name == "ECB":
                print("ECB")
                self.Defunc = decryption_ECB
            elif front_name == "CBC":
                self.Defunc = decryption_CBC
            elif front_name == "CFB":
                self.Defunc = decryption_CFB
            else:
                self.Defunc = encryption_CTR
            self.thread = Decry_Thread(self.imgName, self.Defunc, "bak_") # 传入图片给线程
            self.label_2.setPixmap(QtGui.QPixmap("")) # 清空图片

            messageDialog("正在对图片进行" + self.Defunc.__name__ + "加密," + "请勿执行其他操作!!")
            self.setButtonUnAble()
            self.thread.finishSignal.connect(self.De_fins)
            self.thread.start()
        else:
            pass

    # 解密信号
    def De_fins(self, msg):
        if msg != "failure":
            messageDialog("解密完成")
            png = QtGui.QPixmap(msg).scaled(self.label_3.width(), self.label_3.height())
            self.label_3.setPixmap(png)
            self.setButtonAble()
        else:
            messageDialog("解密失败！")

    # 加密信号
    def En_fins(self, msg):
        if msg != "failure":
            messageDialog("加密完成")
            # 显示加密后的图片
            png = QtGui.QPixmap(msg).scaled(self.label_2.width(), self.label_2.height())
            self.label_2.setPixmap(png)
            self.setButtonAble()
        else:
            messageDialog("加密失败!")

    def openimage(self):
        self.imgName, imType = QFileDialog.getOpenFileName(self.centralwidget, "open file", "./",
                                                           "*.jpg;;*.png;;*.jpeg;;*.bmp;;All Files(*)")
        # print(imgName)
        png = QtGui.QPixmap(self.imgName).scaled(self.label.width(), self.label.height())
        self.label.setPixmap(png)

def messageDialog(txt):
    msg_box = QMessageBox(QMessageBox.Warning, "警告", txt)
    msg_box.exec_()

# 1、CBC加密模式

# CBC加密图片函数
def encryption_CBC(pic_name, secret_name):
    print("开始加密图片" + pic_name)
    img_bytes, w, h = b.get_img_bin(pic_name)  # 返回图片对于RGB值的二进制组合， 宽和高
    plain, n = d.des_input_plain(img_bytes)
    # b.get_bin_img(plain)
    iv1 = IV
    cipher_str = ''
    for i in range(n):
        plain_text = plain[i * 64: (i + 1) * 64]
        flag = 0
        iv1 = d.des(d.d_xor(iv1, plain_text), key1, flag)  # 加密所得的密文, 上一次密文与这一次明文异或
        iv1 = d.des(iv1, key2, flag)  # 对第一次加密的密文第二次加密
        cipher_str = cipher_str + ''.join(iv1)  # 密文链接起来

    # print(len(cipher_str))
    # d.des_output_cipher(cipher_str)
    b.get_bin_img(cipher_str, secret_name, w, h)  # 按照原图片w和h来生成加密图片，省去了多余的填充数据


# CBC解密图片函数
def decryption_CBC(pic_name, plain_name):
    print("开始解密图片"+pic_name)
    # ############### 解密 ##################  #
    img_bytes2, w2, h2 = b.get_img_bin(pic_name)
    cipher, n = d.des_input_cipher(img_bytes2)
    iv2 = IV
    plain_str = ''
    for i in range(n):
        cipher_text = cipher[i * 64: (i + 1) * 64]
        flag = 1  # 解密
        # t_ = d.d_xor(iv, d.des(cipher_text, key1, flag))
        fir = d.des(cipher_text, key2, flag)  # 第一次解密用key2
        t_ = d.d_xor(iv2, d.des(fir, key1, flag))  # 第二次解密用key1得到t_明文
        iv2 = cipher_text
        plain_str = plain_str + ''.join(t_)
    # d.des_output_plain(plain_str)
    b.get_bin_img(plain_str, plain_name, w2, h2)

# ECB加密模式
def encryption_ECB(pic_name, secret_name):
    img_bytes, w, h = b.get_img_bin(pic_name)
    plain, n = d.des_input_plain(img_bytes) # 明文和组数
    cipher_txt = ''
    for i in range(n):
        plain_txt = plain[i * 64 : (i + 1)*64]
        flag = 0
        cipher_t = d.des(plain_txt, key1, flag)
        cipher_t = d.des(cipher_t, key2, flag)
        cipher_txt = cipher_txt + ''.join(cipher_t)
    b.get_bin_img(cipher_txt, secret_name, w, h)

def decryption_ECB(pic_name, plain_name):
    img_bytes2, w2, h2 = b.get_img_bin(pic_name)
    cipher, n = d.des_input_cipher(img_bytes2)  # 明文和组数
    plain_str = ''
    for i in range(n):
        cipher_text = cipher[i * 64 : (i + 1) * 64]
        flag = 1
        fir = d.des(cipher_text, key2, flag)
        fir = d.des(fir, key1, flag)
        plain_str = plain_str + ''.join(fir)
    b.get_bin_img(plain_str, plain_name, w2, h2)


# CTR加密模式|解密通用
def encryption_CTR(pic, secret):
    img_bytes, w, h = b.get_img_bin(pic)
    print("CTR")
    plain, n = d.des_input_plain(img_bytes)
    iv = IV
    cipher_str = ''
    for i in range(n):
        plain_text = plain[i * 64 : (i + 1) * 64]
        flag = 0
        # 加密两次
        _t = d.des(iv, key1, flag)
        _t = d.des(_t, key2, flag)
        # 异或
        cipher_str = cipher_str + ''.join(d.d_xor(plain_text, _t))
        iv = bin(int(iv, 2) + 1)[2:]
        iv = d.d_zero_fill(iv, len(iv), 64, 'l') # 左边填充
    b.get_bin_img(cipher_str, secret, w, h)

# CFB加密模式
def encryption_CFB(pic, secret):
    img_bytes, w, h = b.get_img_bin(pic)
    plain, n = d.des_input_plain(img_bytes)
    iv1 = IV
    cipher_str = ''
    for i in range(n):
        plain_text = plain[i * 64 : (i + 1) * 64]
        flag = 0
        # 将初始向量加密两次后与明文异或
        t_ = d.des(iv1, key1, flag)
        t_ = d.des(t_, key2, flag)
        a_cipher = d.d_xor(plain_text, t_)
        # 这组密文作为下一组的初始向量
        iv1 = a_cipher
        cipher_str = cipher_str + ''.join(a_cipher)
    b.get_bin_img(cipher_str, secret, w, h)

def decryption_CFB(pic, plain):
    img_bytes2, w2, h2 = b.get_img_bin(pic)
    cipher, n = d.des_input_cipher(img_bytes2)
    iv2 = IV
    plain_str = ''
    for i in range(n):
        cipher_text = cipher[i * 64 : (i + 1) * 64]
        flag = 0 # 加密
        # 将iv2加密两次
        pla = d.des(iv2, key1, flag)
        pla = d.des(pla, key2, flag)
        iv2 = cipher_text
        plain_str = plain_str + ''.join(d.d_xor(pla, cipher_text))
    b.get_bin_img(plain_str, plain, w2, h2)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle('Fusion')
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())