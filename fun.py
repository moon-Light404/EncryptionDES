# -*- coding: utf-8 -*-
# @Project: MIma
# @Author: dingjun
# @File name: fun
# @Create time: 2022/1/2 22:04

# 都减去1，因为明文下标从0开始
IP = [57, 49, 41, 33, 25, 17, 9, 1,
      59, 51, 43, 35, 27, 19, 11, 3,
      61, 53, 45, 37, 29, 21, 13, 5,
      63, 55, 47, 39, 31, 23, 15, 7,
      56, 48, 40, 32, 24, 16, 8, 0,
      58, 50, 42, 34, 26, 18, 10, 2,
      60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6]
# IP逆置换
IP_ = [39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52,
       20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25, 32, 0,
       40, 8, 48, 16, 56, 24]

key_table_l_1 = [49, 42, 35, 28, 21, 14, 7,
                 0, 50, 43, 36, 29, 22, 15,
                 8, 1, 51, 44, 37, 30, 23,
                 16, 9, 2, 52, 45, 38, 31]

key_table_r_1 = [55, 48, 41, 34, 27, 20, 13,
                 6, 54, 47, 40, 33, 26, 19,
                 12, 5, 53, 46, 39, 32, 25,
                 18, 11, 4, 24, 17, 10, 3]
# 因为是从0开始的，所以数字都减少了1 子密钥的置换选择表PC2
key_table_l_2 = [13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 20, 9,
                 22, 18, 11, 3, 25, 7, 15, 6, 26, 19, 12, 1]

key_table_r_2 = [12, 23, 2, 8, 18, 26, 1, 11, 22, 16, 4, 19,
                 15, 20, 10, 27, 5, 24, 17, 13, 21, 7, 0, 3]

# 扩展置换E
expand_table = [31, 0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8,
                7, 8, 9, 10, 11, 12, 11, 12, 13, 14, 15, 16,
                15, 16, 17, 18, 19, 20, 19, 20, 21, 22, 23, 24,
                23, 24, 25, 26, 27, 28, 27, 28, 29, 30, 31, 0]

# S盒
s_boxes_table_1 = [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
                   0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
                   4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
                   15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]

s_boxes_table_2 = [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
                   3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
                   0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
                   13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]

s_boxes_table_3 = [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
                   13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
                   13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
                   1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]

s_boxes_table_4 = [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
                   13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
                   10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
                   3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]

s_boxes_table_5 = [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
                   14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
                   4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
                   11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]

s_boxes_table_6 = [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
                   10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
                   9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
                   4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]

s_boxes_table_7 = [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
                   13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
                   1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
                   6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]

s_boxes_table_8 = [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
                   1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
                   7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
                   2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]

s_boxes_table = [s_boxes_table_1, s_boxes_table_2, s_boxes_table_3, s_boxes_table_4,
                 s_boxes_table_5, s_boxes_table_6, s_boxes_table_7, s_boxes_table_8]

# 扩展置换P
p_box_table = [15, 6, 19, 20, 28, 11, 27, 16, 0, 14, 22, 25, 4, 17, 30, 9,
               1, 7, 23, 13, 31, 26, 2, 8, 18, 12, 29, 5, 21, 10, 3, 24]


def f_shift(key_, step):  # key_: 56bit
    return key_[step:] + key_[:step]


def f_zero_fill(str_, num_1_, num_2_, pos_):
    if num_1_ < num_2_:
        for _ in range(num_2_ - num_1_):
            if pos_ == 'l':  # 左边补0
                str_ = '0' + str_
            if pos_ == 'r':  # 右边补0
                str_ = str_ + '0'
    return str_


# 生成16个子密钥
def f_sub_keys(key_):  # key: 56bit
    key_result = []
    key_l = [key_[key_table_l_1[_]] for _ in range(28)]
    key_r = [key_[key_table_r_1[_]] for _ in range(28)]
    for i in range(16):
        if i == 0 or i == 1 or i == 8 or i == 15:
            step = 1
        else:
            step = 2
        key_l = f_shift(key_l, step)  # 循环左移
        key_r = f_shift(key_r, step)
        key_l_ = [key_l[key_table_l_2[_]] for _ in range(24)]
        key_r_ = [key_l[key_table_r_2[_]] for _ in range(24)]
        key_result.append(key_l_ + key_r_)  # 生成的16轮子密钥
    return key_result  # key_result: list_16 48bit


# x序列和y序列进行异或
def f_xor(x, y):
    return [str(int(x[_]) ^ int(y[_])) for _ in range(len(x))]  # 注意这里已经将字符转换成二进制了


def f_expand(r_):
    return [r_[expand_table[_]] for _ in range(48)]


# 初始置换
def f_IP(r):
    return [r[IP[_]] for _ in range(64)]


# 逆置换
def f_IP_(r):
    return [r[IP_[_]] for _ in range(64)]


def f_s_boxes(expand_):  # expand_ 48bit
    s_boxes_ = []
    for i in range(8):
        row = 2 * int(expand_[i * 6]) + int(expand_[i * 6 + 5])
        col = 8 * int(expand_[i * 6 + 1]) + 4 * int(expand_[i * 6 + 2]) + 2 * int(expand_[i * 6 + 3]) + int(
            expand_[i * 6 + 4])
        t_ = s_boxes_table[i][row * 16 + col]
        s_ = bin(s_boxes_table[i][t_])[2:]
        s_ = f_zero_fill(s_, len(s_), 4, 'l')
        s_boxes_.extend(s_)
    return s_boxes_  # 32bit


def f_p_box(s_boxes_):  # 32bit
    return [s_boxes_[p_box_table[_]] for _ in range(32)]


# k = '0101001010011001010100010010100100110100010101100111100010010011'
# k = f_IP(k)
# k = f_IP_(k)
# print(k)